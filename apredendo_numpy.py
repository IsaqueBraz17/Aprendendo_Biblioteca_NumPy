# -*- coding: utf-8 -*-
"""Apredendo_NumPy

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15YR_nDu9a6ZqYjq44-jGEvUeV2EWsZF-
"""

# Importando bibliotecas
import numpy as np
import matplotlib.pyplot as plt

url = 'https://raw.githubusercontent.com/alura-cursos/numpy/dados/apples_ts.csv'

Dados = np.loadtxt(url, delimiter=',', usecols=np.arange(1,88,1))

np.arange(1,88,1)

Dados.ndim

Dados.size

Dados.shape

Dados_Transposto = Dados.T

# Variavel = Array de Datas
Datas = Dados_Transposto [:,0]

# Variavel = Array de Preços
Precos = Dados_Transposto [:,1:6]

# Formatando array para datas
Datas = np.arange(1,88,1)

# Criando um grafico
plt.plot(Datas, Precos[:,0])

# Separando por cidades
Moscow = Precos[:,0]
Kaliningrad = Precos[:,1]
Petersburg = Precos[:,2]
Krasnodar= Precos[:,3]
Ekaterinburg = Precos[:,4]

Moscow

Moscow.shape

# Separando por anos
Moscow_ano1 = Moscow[0:12]
Moscow_ano2 = Moscow[12:24]
Moscow_ano3 = Moscow[24:36]
Moscow_ano4 = Moscow[36:48]

# Gráfico e indentificação de valores
plt.plot(np.arange(1,13,1), Moscow_ano1)
plt.plot(np.arange(1,13,1), Moscow_ano2)
plt.plot(np.arange(1,13,1), Moscow_ano3)
plt.plot(np.arange(1,13,1), Moscow_ano4)
plt.legend(['ano1','ano2','ano3','ano4'])

# Comparando arrays ( iguais ou proximos )
np.array_equal(Moscow_ano3,Moscow_ano4)

# Verificar se arrays são proximos
# ( Dentro de um intervalo )
np.allclose(Moscow_ano3,Moscow_ano4,10)

plt.plot(Datas,Kaliningrad)

Kaliningrad

# Verificando a quantidade de valores NaN
int(sum(np.isnan(Kaliningrad)))

# Lidando com NaNs
(Kaliningrad[3]+Kaliningrad[5])/2

# Calcular Médias
Kaliningrad[4] = np.mean([Kaliningrad[3],Kaliningrad[5]])

# Comparando as médias de preço de duas cidades
Moscow_Media = float(np.mean(Moscow))
print('Moscow: R$', Moscow_Media)

Kaliningrad_Media = float(np.mean(Kaliningrad))
print('Kaliningrad : R$', Kaliningrad_Media)